<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class TeamCategory extends \App\Entity\TeamCategory implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'categoryid', '' . "\0" . 'App\\Entity\\TeamCategory' . "\0" . 'name', '' . "\0" . 'App\\Entity\\TeamCategory' . "\0" . 'sortorder', '' . "\0" . 'App\\Entity\\TeamCategory' . "\0" . 'color', '' . "\0" . 'App\\Entity\\TeamCategory' . "\0" . 'visible', '' . "\0" . 'App\\Entity\\TeamCategory' . "\0" . 'allow_self_registration', '' . "\0" . 'App\\Entity\\TeamCategory' . "\0" . 'teams', '' . "\0" . 'App\\Entity\\TeamCategory' . "\0" . 'contests'];
        }

        return ['__isInitialized__', 'categoryid', '' . "\0" . 'App\\Entity\\TeamCategory' . "\0" . 'name', '' . "\0" . 'App\\Entity\\TeamCategory' . "\0" . 'sortorder', '' . "\0" . 'App\\Entity\\TeamCategory' . "\0" . 'color', '' . "\0" . 'App\\Entity\\TeamCategory' . "\0" . 'visible', '' . "\0" . 'App\\Entity\\TeamCategory' . "\0" . 'allow_self_registration', '' . "\0" . 'App\\Entity\\TeamCategory' . "\0" . 'teams', '' . "\0" . 'App\\Entity\\TeamCategory' . "\0" . 'contests'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (TeamCategory $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategoryid(int $categoryid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategoryid', [$categoryid]);

        return parent::setCategoryid($categoryid);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategoryid()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getCategoryid();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategoryid', []);

        return parent::getCategoryid();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setSortorder($sortorder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSortorder', [$sortorder]);

        return parent::setSortorder($sortorder);
    }

    /**
     * {@inheritDoc}
     */
    public function getSortorder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSortorder', []);

        return parent::getSortorder();
    }

    /**
     * {@inheritDoc}
     */
    public function setColor($color)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setColor', [$color]);

        return parent::setColor($color);
    }

    /**
     * {@inheritDoc}
     */
    public function getColor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getColor', []);

        return parent::getColor();
    }

    /**
     * {@inheritDoc}
     */
    public function setVisible($visible)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVisible', [$visible]);

        return parent::setVisible($visible);
    }

    /**
     * {@inheritDoc}
     */
    public function getVisible()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVisible', []);

        return parent::getVisible();
    }

    /**
     * {@inheritDoc}
     */
    public function setAllowSelfRegistration($allowSelfRegistration)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAllowSelfRegistration', [$allowSelfRegistration]);

        return parent::setAllowSelfRegistration($allowSelfRegistration);
    }

    /**
     * {@inheritDoc}
     */
    public function getAllowSelfRegistration()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllowSelfRegistration', []);

        return parent::getAllowSelfRegistration();
    }

    /**
     * {@inheritDoc}
     */
    public function addTeam(\App\Entity\Team $team)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTeam', [$team]);

        return parent::addTeam($team);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTeam(\App\Entity\Team $team)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTeam', [$team]);

        return parent::removeTeam($team);
    }

    /**
     * {@inheritDoc}
     */
    public function getTeams()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeams', []);

        return parent::getTeams();
    }

    /**
     * {@inheritDoc}
     */
    public function getContests(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContests', []);

        return parent::getContests();
    }

    /**
     * {@inheritDoc}
     */
    public function addContest(\App\Entity\Contest $contest): \App\Entity\TeamCategory
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addContest', [$contest]);

        return parent::addContest($contest);
    }

    /**
     * {@inheritDoc}
     */
    public function removeContest(\App\Entity\Contest $contest): \App\Entity\TeamCategory
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeContest', [$contest]);

        return parent::removeContest($contest);
    }

    /**
     * {@inheritDoc}
     */
    public function inContest(\App\Entity\Contest $contest): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'inContest', [$contest]);

        return parent::inContest($contest);
    }

    /**
     * {@inheritDoc}
     */
    public function getApiIdField(\App\Service\EventLogService $eventLogService)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getApiIdField', [$eventLogService]);

        return parent::getApiIdField($eventLogService);
    }

    /**
     * {@inheritDoc}
     */
    public function getApiId(\App\Service\EventLogService $eventLogService)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getApiId', [$eventLogService]);

        return parent::getApiId($eventLogService);
    }

}
